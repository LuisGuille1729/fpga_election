# We want to calculate x // n for any x with fixed n
# What we can do instead is to calculate (x*(2^l // n)) >> l
# We can precompute 2^l // n

import math
import random

# https://rubenvannieuwpoort.nl/posts/division-by-constant-unsigned-integers



# x = 123456789
# n = 37

# print(f"{x.bit_length()}-bits number divided by {n.bit_length()} number")

# l = x.bit_length()
# S = (2**l) // n
# print(S)

# print(x*S)
# print((x*S) >> l)

# print(x // n)

def compute_division_mult_inv(bits, divisor):
    # mult_inv = math.ceil((2**bits) / divisor)
    mult_inv = (2**bits//divisor) + 1
    # mult_inv = (2**bits) // divisor
    print("Mult_inv: ", mult_inv)
    return mult_inv


# def compute_division_mult_inv2(bits)


def compute_division(x, bits, mult_inv):
    return (x*mult_inv) >> bits

if __name__ == '__main__':
    n = 30
    bits = 12
    mult_inv = compute_division_mult_inv(bits, n)
    
    # for i in range(0, 2**bits):
    #     # if i % n == 0:
    #     #     continue
    #     print(i, n, compute_division(i, bits, mult_inv), i//n, i * n)
    #     assert compute_division(i, bits, mult_inv) == (i//n), f"Wrong value at {i}: {compute_division(i, bits, mult_inv)} instead of {i//n}"


    N = 24298603348542999239474744469072890490956354295641370729036981648708630343434725324552857951009931558546313766563870577924497779647807993675137391985388865972325629382224451115147388661855418295796796426092117412381873609522077928268569523964665547055712043997759152822443548229142496038633810462117915959965269710922465262548828341138509786372705797502294771830110882552969910298655546490669918353671710285533456039285707492948419069894361429814515896814459547808304401372368479975170068863943438080814679348043287738485812146166554250955487778956844544755844751992223318142581805914904219738103941508103889347156767
    bits = 6144-64 # 2048 + 4096 - REGISTER_SIZE (say 64, this is so we can easily shift)
    # mult_inv = compute_division_mult_inv(bits, N)
    mult_inv = 75299540386319832354160211189449715021739337572771619406034950168942320910896840776854970153328317531817236329179406815725689583186853726176905598397390492914804344618125333378787729278321822183396226413688586713590845583585245299283933344483047261329067452218606922201317313088493682065927111964296840109381400532732683401088837160650764546687277777040847177422585670354027880681475100346339193036529984948819170330947279644998579025953595192781811896396668196204841894496431652498822227328376699452763141358399571873467329760181720536465116539495136425372850124300208989594033363546950075573838411453104518901916641298228905697185061669962474356751283187733596877822574754600206684623527575365198056857919390629210755372526149688690285459057377006634195232860727511107656767724680749521238380812355199943718493222164182270400520542015300202052832180915193602335560545451968421551161541355504581254594258915106723392088252063735102087361162514814839309376422247892492224101277591803585351248659373063887685892589143245270972989148291111483798381921903845592141897141997014415163682658432361342924395636546114735726870516464138489520449436370149940037433753071794727253607057736971930561852387076048984088400948076
    print(f"N mult_inv bits: {mult_inv.bit_length()}. (Divisor N is {N.bit_length()}-bits)")
    
    # edges
    F = 60472628860546078011360870963145943090263853400972079821771236955841928996113088119493506127543451492861724310398883116670567736984928762084142286787659180516471286364472249767100943684852457976349266120656910631187716447573262286355863506902112994096338895285616499083127528261586008766214597967382123817098269801023673288709554577790851552209333442862666053470155318174595867438469203274785691563170691373502286147298941847613402433503208185754102408814845492277568162057405791631996026919579940727377879164779977072623354305852390484313916736001845656139293333746021442854393284441845305262781971054296012012474759510508725410624435952124531492210273856139959672744350302001708760136384476113227653887020747557562844313909939762036836493861475372165864634202703935413281216213374674573049546582147079935148330180216888779084769918869545212538572494308145364262379549129341764169045071998748855873817206982289202064521021679260908961544258635807583959537289687906370363662848235349287434214479147330116526714721086893015782794355908031984772700043085583631009136314542777619574574602952330217806484481848259217761136582313583820166639924481401651473323569065286096447719439372516991028866641271012487092703010715584487749032761289
    F2 = 27379322488082137516435420917445479151678635977811053930350057131096048547157600776424817576652998385904968294592025880467043310401092647771352399427400047204146732202474541213621608451348203919414599390968268506046049123214505527326625169657317338944127248706316490545370884985242909721258097149554522248937539206047087610532821366245693646295202472129867436940569241747264362277824141736819780785037568768957751759772000315574710243906902906794953838215439528725653632007416183947934277155620271158647825060355179006931801988103636116701208073532765598957866707498610770500029487829795604855976316092594661595352674226356910060552915491034343549017117202728394260956925040127916436089147623171501357929296972248797022517943314513915336092573317181844075881052659392742210673906974938442423917578436960794670450708491768555996857080515053188421747341537479245774663160099603967464526655884590467104895715525744559972215137416360575133458582788184485007006487470750375582218358979185745821692622411552684820066187305744330650800238487450070070258304241966960230778728275186683541144458957905341387844640200171156384757825702436045446239068264938305781488611484540827252611470223399813449151150492922871105391894213300598716588030670
    for i in [0, 2**4092-1, 1, N, N-1, N+1, F, F2]:
        assert compute_division(i, bits, mult_inv) == (i//N), f"Error with {i}, obtained: {hex(compute_division(i, bits, mult_inv))} instead of {hex(i//n)}"

    print("Finished edges tests")

    # stress
    print("Performing stress test:")
    t = 250000
    for j in range(t):
        exp = random.randint(1, 4092)
        i = random.randint(0, 2**exp)
        assert compute_division(i, bits, mult_inv) == (i//N), f"[{j}] Error with {i}, obtained: {hex(compute_division(i, bits, mult_inv))} instead of {hex(i//n)}"

        exp = random.randint(2048, 4092)
        i = random.randint(0, 2**exp)
        assert compute_division(i, bits, mult_inv) == (i//N), f"[{j}] Error with {i}, obtained: {hex(compute_division(i, bits, mult_inv))} instead of {hex(i//n)}"
    
        exp = random.randint(4000, 4092)
        i = random.randint(0, 2**exp)
        assert compute_division(i, bits, mult_inv) == (i//N), f"[{j}] Error with {i}, obtained: {hex(compute_division(i, bits, mult_inv))} instead of {hex(i//n)}"

        exp = 4092
        i = random.randint(0, 2**exp)
        assert compute_division(i, bits, mult_inv) == (i//N), f"[{j}] Error with {i}, obtained: {hex(compute_division(i, bits, mult_inv))} instead of {hex(i//n)}"

        if j % 10000 == 0:
            print(j, "loops complete")
        
    print(f"Stress test complete (4*{t} = {4*t} tests)")