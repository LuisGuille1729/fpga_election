# from phe import paillier
import time
from random import randint

def timer(func):
    def wrapper(*args, **kwargs):
        start = time.ticks_ms()
        result = func(*args, **kwargs)
        duration = time.ticks_ms() - start
        print(f"[{func.__name__}] Execution time: {duration}")
        return result

    wrapper.total_time = 0
    return wrapper

@timer
def python_pow(val, exp, N):
    return pow(val, exp, N)

print("\nTime Python Exponentiation pow(rand, n, n^2)")
# n = 123
# N = n**2
# r = 1453

# 256-bits
# n = 8956644731225755050589277016460421523947415971053429170517653786040086604743
# N = n**2
# r = 60690674274487873465462020165914942789120267871319706648921031951445911958113

# 512-bits
# n = 6767604330594671760510488437518595198442092549818485468622290146758973835895545290750827103326982214385871018996069709449157684350617332256059079965343197
# N = n**2
# r = 2017357531189451037355738773559695631280170296609350536138374220055397175112083522527865645705630566727320852934840589628171022631439810208498479928610313
# Results: 1,741ms



# 1024-bits
# n = 142045321155132900765323805195730590500163517578408985512570284846969983003720063011509120355180402277489465866780967313694918703648227210597496125514315246342932134752613001718528744907178789885455584707563155566487743917312697331516264173622641704793756697226002344908409711774714745386008806342472714640919
# N = 20176873262064846397809348055801842378048589859106713536388374757672006022227540207650610733685836751143982631160505192134760355435006484787396753539015214396856785320351738224575836279516063174075844786815070947438321243048417988266240669672705033395041012198424637013866693532102424590823804581943659397043097394637176524397808459655598272426642205076049546402873627791742576433699649524164686978135112995669293970932056588824971837469816064533823320683524267056683024873363619327120144848904897604740823162586053073978833999033926854559265719479361747301236643417289188686457287753262750837284138948335179109164561
# r = 124200764743696179369418519360001007280910894868124943902461559689089081343622400437692994095330219027271566061386638334179433682023944595313767820320032590263693380486197531694372609977879530987248983507860540634265790907217387322226273682335497556197924875260925989199064786311215139218684644979275570080090
# Results: 13,534ms

# 2048-bits
n = 24298603348542999239474744469072890490956354295641370729036981648708630343434725324552857951009931558546313766563870577924497779647807993675137391985388865972325629382224451115147388661855418295796796426092117412381873609522077928268569523964665547055712043997759152822443548229142496038633810462117915959965269710922465262548828341138509786372705797502294771830110882552969910298655546490669918353671710285533456039285707492948419069894361429814515896814459547808304401372368479975170068863943438080814679348043287738485812146166554250955487778956844544755844751992223318142581805914904219738103941508103889347156767
N = n**2
r = 15102524655695850254130161268223108068132172054628538057955407806246910422836023988398106855782519488330171051986701441153108774135504215731405685539223944007113009353823744309955366596223466896415934397307045667687173871932430586274468878450073287071104645230590373838606308022397539382456429602206580339673340326501747704745158697109858596130175920044449386789513518944016416638413619251827944450937576003076628302197721335963339616665631451630618662166198833275181593418424929970351526274327234235352256534152734621894768566521165270686218991305941967035504206729041697699330657970228431890747902479116559197031450
# Results: 92,130ms

# python_pow(r, n, N)




@timer
def encrypt_my_paillier(plaintext, r, g, n, N):
    return pow(g, plaintext, N) * pow(r, n, N) % N

@timer
def decrypt_my_paillier(ciphertext, lambd, mu, n, N):
    return ((pow(ciphertext, lambd, N) - 1) // n) * mu % n

g = 24298603348542999239474744469072890490956354295641370729036981648708630343434725324552857951009931558546313766563870577924497779647807993675137391985388865972325629382224451115147388661855418295796796426092117412381873609522077928268569523964665547055712043997759152822443548229142496038633810462117915959965269710922465262548828341138509786372705797502294771830110882552969910298655546490669918353671710285533456039285707492948419069894361429814515896814459547808304401372368479975170068863943438080814679348043287738485812146166554250955487778956844544755844751992223318142581805914904219738103941508103889347156768
euler_totient = 24298603348542999239474744469072890490956354295641370729036981648708630343434725324552857951009931558546313766563870577924497779647807993675137391985388865972325629382224451115147388661855418295796796426092117412381873609522077928268569523964665547055712043997759152822443548229142496038633810462117915959964955464479024933422992909635397164311546361372532118006196725814332208510070121559031989216338031857983916010030668064205891373472234326096586015391335681399251733336672726683199532344809536988586555705039782732792395990414225992198743278061328019762865406265480992968614844386447881974648024301034133270890160
mu = 8915567752383628781438898187002797896548025900480737799095311841381836545755198503892372879726878495151035115946986868458012154448649583896132194358560329782831378798600255894543884351748301246095759638231762423081258773261447078148315461663411905258069603207263310818435311223030456445831047816378110749327580484779512120318259491191211823394214832953187276053506207701544252431583335833161276475407653180651152186091635887389297141653769732662414014629608293223179202238133723709179125878839638929208525481449388861597926415145013669009524453207751806355956198029749591583141643408193028947053783351959727470281524


message = 1
print("Encrypting:")
cipher = encrypt_my_paillier(1, r, g, n, N)
print("Decrypting:")
plaintext = decrypt_my_paillier(cipher, euler_totient, mu, n, N)
print("Obtained:", plaintext)