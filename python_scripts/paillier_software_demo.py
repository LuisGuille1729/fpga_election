from phe import paillier
import time
from random import randint

def timer(func):
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        duration = time.time() - start
        wrapper.total_time += duration
        print(f"[{func.__name__}] Execution time: {duration}")
        return result

    wrapper.total_time = 0
    return wrapper

public_key, private_key = paillier.generate_paillier_keypair(n_length=2048)

@timer
def python_pow(val, exp, N):
    return pow(val, exp, N)

@timer
def encrypt_my_paillier(plaintext, r, g, n, N):
    return pow(g, plaintext, N) * pow(r, n, N) % N

@timer
def decrypt_my_paillier(ciphertext, lambd, mu, n, N):
    return ((pow(ciphertext, lambd, N) - 1) // n) * mu % n

@timer
def encrypt_phe_library(plaintext):
    return public_key.encrypt(plaintext)
    
@timer
def decrypt_phe_library(ciphertext):
    return private_key.decrypt(ciphertext)

print("\nTime Python Exponentiation pow(rand, n, n^2)")
n = 24298603348542999239474744469072890490956354295641370729036981648708630343434725324552857951009931558546313766563870577924497779647807993675137391985388865972325629382224451115147388661855418295796796426092117412381873609522077928268569523964665547055712043997759152822443548229142496038633810462117915959965269710922465262548828341138509786372705797502294771830110882552969910298655546490669918353671710285533456039285707492948419069894361429814515896814459547808304401372368479975170068863943438080814679348043287738485812146166554250955487778956844544755844751992223318142581805914904219738103941508103889347156767
N = n**2
val = randint(2**2000, 2**2048-1)    
python_pow(val, n, N)
val = randint(2**2000, 2**2048-1)    
python_pow(val, n, N)
val = randint(2**2000, 2**2048-1)    
python_pow(val, n, N)
val = randint(2**2000, 2**2048-1)    
python_pow(val, n, N)
val = randint(2**2000, 2**2048-1)    
python_pow(val, n, N)
    

print("\nTime our Paillier software implementation")
g = 24298603348542999239474744469072890490956354295641370729036981648708630343434725324552857951009931558546313766563870577924497779647807993675137391985388865972325629382224451115147388661855418295796796426092117412381873609522077928268569523964665547055712043997759152822443548229142496038633810462117915959965269710922465262548828341138509786372705797502294771830110882552969910298655546490669918353671710285533456039285707492948419069894361429814515896814459547808304401372368479975170068863943438080814679348043287738485812146166554250955487778956844544755844751992223318142581805914904219738103941508103889347156768
euler_totient = 24298603348542999239474744469072890490956354295641370729036981648708630343434725324552857951009931558546313766563870577924497779647807993675137391985388865972325629382224451115147388661855418295796796426092117412381873609522077928268569523964665547055712043997759152822443548229142496038633810462117915959964955464479024933422992909635397164311546361372532118006196725814332208510070121559031989216338031857983916010030668064205891373472234326096586015391335681399251733336672726683199532344809536988586555705039782732792395990414225992198743278061328019762865406265480992968614844386447881974648024301034133270890160
mu = 8915567752383628781438898187002797896548025900480737799095311841381836545755198503892372879726878495151035115946986868458012154448649583896132194358560329782831378798600255894543884351748301246095759638231762423081258773261447078148315461663411905258069603207263310818435311223030456445831047816378110749327580484779512120318259491191211823394214832953187276053506207701544252431583335833161276475407653180651152186091635887389297141653769732662414014629608293223179202238133723709179125878839638929208525481449388861597926415145013669009524453207751806355956198029749591583141643408193028947053783351959727470281524

print("[Encrypt]")
r = randint(2**2000, 2**2048-1)   
c0 = encrypt_my_paillier(0, r, g, n, N)
r = randint(2**2000, 2**2048-1)   
c1 = encrypt_my_paillier(1, r, g, n, N)
r = randint(2**2000, 2**2048-1)   
c2 = encrypt_my_paillier(2, r, g, n, N)
r = randint(2**2000, 2**2048-1)   
c3 = encrypt_my_paillier(3, r, g, n, N)
r = randint(2**2000, 2**2048-1)   
c4 = encrypt_my_paillier(4, r, g, n, N)

print("[Decrypt]")
p0 = decrypt_my_paillier(c0, euler_totient, mu, n, N)
p1 = decrypt_my_paillier(c1, euler_totient, mu, n, N)
p2 = decrypt_my_paillier(c2, euler_totient, mu, n, N)
p3 = decrypt_my_paillier(c3, euler_totient, mu, n, N)
p4 = decrypt_my_paillier(c4, euler_totient, mu, n, N)

assert p0 == 0
assert p1 == 1
assert p2 == 2
assert p3 == 3
assert p4 == 4





print("\nTime PHE Library's implementation")
print("[Encrypt]")
c0 = encrypt_phe_library(0)
c1 = encrypt_phe_library(1)
c2 = encrypt_phe_library(2)
c3 = encrypt_phe_library(3)
c4 = encrypt_phe_library(4)
print("[Decrypt]")
p0 = decrypt_phe_library(c0)
p1 = decrypt_phe_library(c1)
p2 = decrypt_phe_library(c2)
p3 = decrypt_phe_library(c3)
p4 = decrypt_phe_library(c4)

assert p0 == 0
assert p1 == 1
assert p2 == 2
assert p3 == 3
assert p4 == 4