from paillier import generate_keys, encrypt, decrypt

mont_ciph1 = 0x364a0d4e6f279d4a0e59138f831be59d10d604c67ba8552698b6ddd3844a59af9aea0f54259e7b114ed30b3360251f403e895e5f76f1745757127bc4989ef339c97cd5ade1210bedf2d35101abce6cd82469ee5a0660cf0e96165afa709006d2d14c777931d635fb2ee7c2d367d1072bacb21b8d35c202d9fbcb86add33d44ca596bbf1fd7a9890da3b2d3c52f87d9553415aea2393d379efeb04b79f28ea122f42778e906f15d20fec102712a344839c1a03029bba303760b2babb3fdecb1110cd02601f144b831e78066857fc406cee4c28bc9cfaed0e27257f5d08dabd381c2162e4ddb70074a9ef7c0bc8cc2783302f6f1f84899f1ca78b7617e3d7ae6a65ba63d04e8d8e5edb8db6ef2e33a50c11fa6da6ea3dac29b2ab1b00af60e7db0b1a9bc4191de888f83669806004a5e09d823955e7eb11a9b059aa45ded74984dbf8e6a256d2b7017c43bc8c010791d2fdc0dce7f96688ac03cdc513912b87c7e82527dbd1c71c9c2748eb96b64544ec0c28429d673ca40d72382e7ec09a1a3eeef8db419e893d84f36fb5743f12e246dbbe4f3eb96456e74f285d7a762bacfd6fbf2ad65b28d96c4a9bc02a380e9198449427173fa1ea66dedff9a6933b8208d2243588ac103cf551f8a20c5c827892df26eeac11bc48c355b82c1d6c75652a6b4a16d435589c9c9920f46f30c4225e7c85cebf223658f7f14b49c336fcd0744
mont_ciph0 = 0x47c4765f3cba420f88e0625182b512ffeb1beb448e3c1072124fb2d13efa5eeee24183e77c759332ed31bd6cdcc764259c956bda8e160a178c7b9f3fb52ab80957912da9fca6152d7298de85a0f3a63deed5431ebbc2117e7f2d6dbb6804702cb01eb9ec23d45f7833483bbccdc2475e25b2fcee08a06e9bcf6b7f8c44913094cf8e2882d7d45c48d478b43ef0d611deef19f84e9de3493042c672933dfa02646f384d2872e2494cadc81c6714c4ee4022ac7e20c06063eb0023b0fb31f23beb31ae5e117c1ec9b05c39a5ff6d5b29b3d337f6079b0614e568297b617fb2978d95e408d780ec5e868687bc47ad53d103dd73645d25e31f9999a394952116d30dc2e8abe77ab8878d12fee71550ed12916cbf99737b960ec91793b0555d499c97dee15bc4d11eb61efcadbd1d120b134e6691a40464e4593fadf8bc5f63ea8ad659de6473cfaa0a7dff83c30047302dabe49e6bcf35092ac968216591c8a124f519b7e4e6698fa2e4a0c28870e33bc6b73c6fcea3ff9a3b7853f0fceb883c72ce34914aca772713a6c0ecd46868b65a35275f62ec98a1c10b69918244d9410e0d417ff4fea09f8c6d9e3cf9d4f10cf83d2620e8c11a8b1393aee894ed6d6991e585205c37af9c2cf96874fe38b8597861f24a0381f5fafcb484698314a148fc09afbf6576d91299682a132eb17a19b06e189b87b1afbd36c15ea5933eb40e9671

mont_ciph = int(mont_ciph0)

n = 24298603348542999239474744469072890490956354295641370729036981648708630343434725324552857951009931558546313766563870577924497779647807993675137391985388865972325629382224451115147388661855418295796796426092117412381873609522077928268569523964665547055712043997759152822443548229142496038633810462117915959965269710922465262548828341138509786372705797502294771830110882552969910298655546490669918353671710285533456039285707492948419069894361429814515896814459547808304401372368479975170068863943438080814679348043287738485812146166554250955487778956844544755844751992223318142581805914904219738103941508103889347156767
N = n**2

R = 2**4096
P = pow(R, -1, N)

# print("P: ", P)

true_ciph = (mont_ciph * R) % N

# print(true_ciph)


# Expected encryption with r = 2

keys = generate_keys(False, False)
expected_ciph = encrypt(keys.public, 0)

# print(expected_ciph)

factored_plaintext = decrypt(keys, expected_ciph*123)
print(factored_plaintext)


# I am getting D(E(0)*123) = message associated with 123 (mod n)
# Moreover, g^m = 123
# So that means that:
# pow(keys.public.g, factored_plaintext, N) == 123
 
print("g^m%N:", pow(keys.public.g, factored_plaintext, N))