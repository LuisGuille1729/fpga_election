

import cocotb
from cocotb.triggers import Timer
import os
from pathlib import Path
import sys

from cocotb.clock import Clock
from cocotb.triggers import Timer, ClockCycles, RisingEdge, FallingEdge, ReadOnly,ReadWrite,with_timeout, First, Join
from cocotb.utils import get_sim_time as gst
from cocotb.runner import get_runner


import random

from random import getrandbits

async def reset(rst,clk):
    """ Helper function to issue a reset signal to our module """
    rst.value = 1
    await ClockCycles(clk,3)
    rst.value = 0



async def send_num(dut,num1):
    dut.num_in.value = num1
    dut.valid_in.value = 1
    await ClockCycles(dut.clk_in,1)
    dut.valid_in.value = 0

    
async def nondet_test(dut):
    n = 24298603348542999239474744469072890490956354295641370729036981648708630343434725324552857951009931558546313766563870577924497779647807993675137391985388865972325629382224451115147388661855418295796796426092117412381873609522077928268569523964665547055712043997759152822443548229142496038633810462117915959965269710922465262548828341138509786372705797502294771830110882552969910298655546490669918353671710285533456039285707492948419069894361429814515896814459547808304401372368479975170068863943438080814679348043287738485812146166554250955487778956844544755844751992223318142581805914904219738103941508103889347156767
    mu = 8915567752383628781438898187002797896548025900480737799095311841381836545755198503892372879726878495151035115946986868458012154448649583896132194358560329782831378798600255894543884351748301246095759638231762423081258773261447078148315461663411905258069603207263310818435311223030456445831047816378110749327580484779512120318259491191211823394214832953187276053506207701544252431583335833161276475407653180651152186091635887389297141653769732662414014629608293223179202238133723709179125878839638929208525481449388861597926415145013669009524453207751806355956198029749591583141643408193028947053783351959727470281524
    upper_bound = max(n,mu) * n;

    rand_num = random.randint(0,upper_bound);
    expected_res = rand_num%n;
    for i in range(NUM_BLOCKS):
        sel = rand_num & (2**REGISTER_SIZE -1)
        await send_num(dut,sel)
        rand_num = rand_num >> REGISTER_SIZE
    while (dut.valid_out.value != 1):
        await ClockCycles(dut.clk_in,1)
    accum =0
    for i in range(NUM_BLOCKS):
        accum += (int(dut.data_out.value))*(2**(REGISTER_SIZE*i))
        await ClockCycles(dut.clk_in,1)
    assert(dut.valid_out.value != 1)
    assert(accum == expected_res)



async def upper_edge_test(dut):

    n = 24298603348542999239474744469072890490956354295641370729036981648708630343434725324552857951009931558546313766563870577924497779647807993675137391985388865972325629382224451115147388661855418295796796426092117412381873609522077928268569523964665547055712043997759152822443548229142496038633810462117915959965269710922465262548828341138509786372705797502294771830110882552969910298655546490669918353671710285533456039285707492948419069894361429814515896814459547808304401372368479975170068863943438080814679348043287738485812146166554250955487778956844544755844751992223318142581805914904219738103941508103889347156767
    mu = 8915567752383628781438898187002797896548025900480737799095311841381836545755198503892372879726878495151035115946986868458012154448649583896132194358560329782831378798600255894543884351748301246095759638231762423081258773261447078148315461663411905258069603207263310818435311223030456445831047816378110749327580484779512120318259491191211823394214832953187276053506207701544252431583335833161276475407653180651152186091635887389297141653769732662414014629608293223179202238133723709179125878839638929208525481449388861597926415145013669009524453207751806355956198029749591583141643408193028947053783351959727470281524
    upper_bound = max(n,mu) * n;

    rand_num = upper_bound;
    expected_res = rand_num%n;
    for i in range(NUM_BLOCKS):
        sel = rand_num & (2**REGISTER_SIZE -1)
        await send_num(dut,sel)
        rand_num = rand_num >> REGISTER_SIZE
    while (dut.valid_out.value != 1):
        await ClockCycles(dut.clk_in,1)
    accum =0
    for i in range(NUM_BLOCKS):
        accum += (int(dut.data_out.value))*(2**(REGISTER_SIZE*i))
        await ClockCycles(dut.clk_in,1)
    assert(dut.valid_out.value != 1)
    assert(accum == expected_res)

async def lower_edge_test(dut):

    n = 24298603348542999239474744469072890490956354295641370729036981648708630343434725324552857951009931558546313766563870577924497779647807993675137391985388865972325629382224451115147388661855418295796796426092117412381873609522077928268569523964665547055712043997759152822443548229142496038633810462117915959965269710922465262548828341138509786372705797502294771830110882552969910298655546490669918353671710285533456039285707492948419069894361429814515896814459547808304401372368479975170068863943438080814679348043287738485812146166554250955487778956844544755844751992223318142581805914904219738103941508103889347156767
    mu = 8915567752383628781438898187002797896548025900480737799095311841381836545755198503892372879726878495151035115946986868458012154448649583896132194358560329782831378798600255894543884351748301246095759638231762423081258773261447078148315461663411905258069603207263310818435311223030456445831047816378110749327580484779512120318259491191211823394214832953187276053506207701544252431583335833161276475407653180651152186091635887389297141653769732662414014629608293223179202238133723709179125878839638929208525481449388861597926415145013669009524453207751806355956198029749591583141643408193028947053783351959727470281524
    upper_bound = max(n,mu) * n;

    rand_num = 1;
    expected_res = rand_num%n;
    for i in range(NUM_BLOCKS):
        sel = rand_num & (2**REGISTER_SIZE -1)
        await send_num(dut,sel)
        rand_num = rand_num >> REGISTER_SIZE
    while (dut.valid_out.value != 1):
        await ClockCycles(dut.clk_in,1)
    accum =0
    for i in range(NUM_BLOCKS):
        accum += (int(dut.data_out.value))*(2**(REGISTER_SIZE*i))
        await ClockCycles(dut.clk_in,1)
    assert(dut.valid_out.value != 1)
    assert(accum == expected_res)



@cocotb.test()
async def  find_test(dut):
    cocotb.start_soon(Clock(dut.clk_in, 10, units="ns").start())
    dut.valid_in.value = 0
    await reset(dut.rst_in,dut.clk_in)
    await upper_edge_test(dut)
    await lower_edge_test(dut) 
    await nondet_test(dut)
    await nondet_test(dut)

REGISTER_SIZE = 32
BITS_IN_NUM = 4096
NUM_BLOCKS = BITS_IN_NUM//REGISTER_SIZE
def test_tmds_runner():
    """Run the TMDS runner. Boilerplate code"""
    hdl_toplevel_lang = os.getenv("HDL_TOPLEVEL_LANG", "verilog")
    sim = os.getenv("SIM", "icarus")
    proj_path = Path(__file__).resolve().parent.parent
    sys.path.append(str(proj_path / "sim" / "model"))
    sources = [proj_path / "hdl" / "fsm_multiplier.sv", proj_path / "hdl" / "pipeliner.sv", proj_path / "hdl" / "xilinx_true_dual_port_read_first_2_clock_ram.v",
               proj_path / "hdl" / "mul_store.sv", proj_path / "hdl" / "accumulator.sv", 
               proj_path / "hdl" / "mod_n.sv",
               proj_path / "hdl" / "n_multiplier.sv",
               proj_path / "hdl" / "fixed_divider.sv",
               proj_path / "hdl" / "inverse_multiplier.sv",
               proj_path / "hdl" / "great_subtractor.sv",
               proj_path / "hdl" / "great_adder.sv",
               
               ]
    build_test_args = ["-Wall"]
    parameters = {"REGISTER_SIZE": REGISTER_SIZE, "BITS_IN_NUM": BITS_IN_NUM}
    sys.path.append(str(proj_path / "sim"))
    runner = get_runner(sim)
    runner.build(
        sources=sources,
        hdl_toplevel="mod_n",
        always=True,
        build_args=build_test_args,
        parameters=parameters,
        timescale = ('1ns','1ns'),
        waves=True
    )
    run_test_args = []
    runner.test(
        hdl_toplevel="mod_n",
        test_module="test_mod_n",
        test_args=run_test_args,
        waves=True
    )

if __name__ == "__main__":
    test_tmds_runner()